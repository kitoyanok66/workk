openapi: 3.0.0
info:
  title: Workk API
  version: 1.0.0

tags:
  - name: users
    description: Endpoints for managing user accounts and retrieving user information.
  - name: skills
    description: Endpoints for managing skills and retrieving skill information.
  - name: freelancers
    description: Endpoints for managing freelancers and retrieving freelancer information.
  - name: projects
    description: Endpoints for managing projects and retrieving project information.
  - name: likes
    description: Endpoints for managing likes between users (freelancers <-> projects).
  - name: matches
    description: Endpoints for managing matches and retrieving match information.
  - name: auth
    description: Endpoints for auth in the system.

paths:
  /auth:
    post:
      summary: Authenticate user via provider (e.g. Telegram, Google, Email)
      description: Authenticate a user using an external provider. Returns a JWT token and basic user info.
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        200:
          description: Auth successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /matches:
    get:
      summary: Get all matches
      description: Returns list of all matches in the system.
      tags:
        - matches
      responses:
        200:
          description: Successfully fetched matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchDTO'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /matches/{id}:
    get:
      summary: Get match by ID
      description: Retrieves detailed information about a specific match by their unique ID.
      tags:
        - matches
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Match found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Match not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /likes/like:
    post:
      summary: Like a freelancer or project
      description: Adds a like from one user to another user. Returns the created like and optionally the next suggestion.
      tags:
        - likes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeRequest'
      responses:
        200:
          description: Like successfully created, get next card.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeResponse'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /likes/dislike:
    post:
      summary: Dislike a freelancer or project
      description: Marks a user or project as disliked. Returns the next suggestion.
      tags:
        - likes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeRequest'
      responses:
        200:
          description: Dislike recorded successfully, get next card.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DislikeResponse'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects:
    get:
      summary: Get all projects
      description: Returns list of all projects in the system.
      tags:
        - projects
      responses:
        200:
          description: Successfully fetched projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDTO'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create new project
      description: Creates a new project record in the system using provided information.
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        201:
          description: Project successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /projects/{id}:
    get:
      summary: Get project by ID
      description: Retrieves detailed information about a specific project by their unique ID.
      tags:
        - projects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Project found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update project
      description: Updates specific fields of an existing project by their ID.
      tags:
        - projects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        200:
          description: Project updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete project by ID
      description: Permanently deletes a project from the system by their unique ID.
      tags:
        - projects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Project successfully deleted.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /freelancers:
    get:
      summary: Get all freelancers
      description: Returns list of all freelancers in the system.
      tags:
        - freelancers
      responses:
        200:
          description: Successfully fetched freelancers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreelancerDTO'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create new freelancer
      description: Creates a new freelancer record in the system using provided information.
      tags:
        - freelancers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerRequest'
      responses:
        201:
          description: Freelancer successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Freelancer not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /freelancers/{id}:
    get:
      summary: Get freelancer by ID
      description: Retrieves detailed information about a specific freelancer by their unique ID.
      tags:
        - freelancers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Freelancer found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Freelancer not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update freelancer
      description: Updates specific fields of an existing freelancer by their ID.
      tags:
        - freelancers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreelancerRequest'
      responses:
        200:
          description: Freelancer updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreelancerDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Freelancer not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete freelancer by ID
      description: Permanently deletes a freelancer from the system by their unique ID.
      tags:
        - freelancers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Freelancer successfully deleted.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Freelancer not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /skills:
    get:
      summary: Get all skills
      description: Returns list of all skills in the system.
      tags:
        - skills
      responses:
        200:
          description: Successfully fetched skills.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SkillDTO'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create new skill
      description: Creates a new skill record in the system using provided information.
      tags:
        - skills
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillRequest'
      responses:
        201:
          description: Skill successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Skill not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /skills/{id}:
    get:
      summary: Get skill by ID
      description: Retrieves detailed information about a specific skill by their unique ID.
      tags:
        - skills
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Skill found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Skill not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update skill
      description: Updates specific fields of an existing skill by their ID.
      tags:
        - skills
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillRequest'
      responses:
        200:
          description: Skill updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Skill not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete skill by ID
      description: Permanently deletes a skill from the system by their unique ID.
      tags:
        - skills
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Skill successfully deleted.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Skill not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      summary: Get all users
      description: Returns list of all registered users in the system.
      tags:
        - users
      responses:
        200:
          description: Successfully fetched users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create new user
      description: Creates a new user record in the system using provided information.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        201:
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieves detailed information about a specific user by their unique ID.
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update user
      description: Updates specific fields of an existing user by their ID.
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: User updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete user by ID
      description: Permanently deletes a user from the system by their unique ID.
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: User successfully deleted.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    AuthDTO:
      x-go-type: dto.AuthDTO
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Data Transfer Object representing a auth.
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        provider:
          type: string
        external_id:
          type: string
        username:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AuthRequest:
      x-go-type: dto.AuthRequest
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Request body for auth.
      properties:
        user_id:
          type: string
          format: uuid
          nullable: true
        provider:
          type: string
        external_id:
          type: string
        username:
          type: string
    AuthResponse:
      x-go-type: dto.AuthResponse
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Response body for auth.
      properties:
        token:
          type: string
          description: JWT token valid for 24h
        user:
          $ref: '#/components/schemas/UserDTO'
    MatchDTO:
      x-go-type: dto.MatchDTO
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Data Transfer Object representing a match between freelancer and project
      properties:
        id:
          type: string
          format: uuid
        freelancer:
          $ref: '#/components/schemas/FreelancerDTO'
        project:
          $ref: '#/components/schemas/ProjectDTO'
        freelancer_user:
          $ref: '#/components/schemas/UserDTO'
        project_user:
          $ref: '#/components/schemas/UserDTO'
        created_at:
          type: string
          format: date-time
    LikeDTO:
      x-go-type: dto.LikeDTO
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Data Transfer Object representing a like.
      properties:
        id:
          type: string
          format: uuid
        from_user_id:
          type: string
          format: uuid
        to_user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
    LikeRequest:
      x-go-type: dto.LikeRequest
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Request body for creating a like or dislike.
      properties:
        from_user_id:
          type: string
          format: uuid
        to_user_id:
          type: string
          format: uuid
    LikeResponse:
      x-go-type: dto.LikeResponse
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Response body for creating a like and next card.
      properties:
        like:
          $ref: '#/components/schemas/LikeDTO'
        match:
          $ref: '#/components/schemas/MatchDTO'
          nullable: true
        next:
          type: object
          description: Next card (freelancer or project)
    DislikeResponse:
      x-go-type: dto.DislikeResponse
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Response body for creating a dislike and next card.
      properties:
        next:
          type: object
          description: Next card (freelancer or project)
    ProjectDTO:
      x-go-type: dto.ProjectDTO
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Data Transfer Object representing a project.
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        budget:
          type: number
          format: float
        deadline:
          type: string
          format: date-time
        skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillDTO'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ProjectRequest:
      x-go-type: dto.ProjectRequest
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Request body for creating or updating a project.
      properties:
        user_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        budget:
          type: number
          format: float
        deadline:
          type: string
          format: date-time
        skill_ids:
          type: array
          items:
            type: string
            format: uuid
    FreelancerDTO:
      x-go-type: dto.FreelancerDTO
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Data Transfer Object representing a freelancer.
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        hourly_rate:
          type: number
        portfolio_url:
          type: string
        experience_years:
          type: integer
        rating:
          type: number
        skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillDTO'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    FreelancerRequest:
      x-go-type: dto.FreelancerRequest
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Request body for creating or updating a freelancer.
      properties:
        user_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        hourly_rate:
          type: number
        portfolio_url:
          type: string
        experience_years:
          type: integer
        skill_ids:
          type: array
          items:
            type: string
            format: uuid
    SkillDTO:
      x-go-type: dto.SkillDTO
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Data Transfer Object representing a skill.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        category:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    SkillRequest:
      x-go-type: dto.SkillRequest
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Request body for creating or updating a skill.
      properties:
        name:
          type: string
        category:
          type: string
        description:
          type: string
    UserDTO:
      x-go-type: dto.UserDTO
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Data Transfer Object representing a user.
      properties:
        id:
          type: string
          format: uuid
        telegram_user_id:
          type: integer
        telegram_username:
          type: string
        full_name:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserRequest:
      x-go-type: dto.UserRequest
      x-go-type-import:
        name: dto
        path: github.com/kitoyanok66/workk/dto
      type: object
      description: Request body for creating or updating a user.
      properties:
        telegram_user_id:
          type: integer
        telegram_username:
          type: string
        full_name:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int
        message:
          type: string
