// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/kitoyanok66/workk/config"
	"github.com/kitoyanok66/workk/internal/db"
	"github.com/kitoyanok66/workk/internal/freelancers"
	"github.com/kitoyanok66/workk/internal/likes"
	"github.com/kitoyanok66/workk/internal/matches"
	"github.com/kitoyanok66/workk/internal/projects"
	"github.com/kitoyanok66/workk/internal/skills"
	"github.com/kitoyanok66/workk/internal/users"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitApp(cfg *config.Config) (*App, error) {
	gormDB, err := db.InitDB(cfg)
	if err != nil {
		return nil, err
	}
	userRepository := users.NewUserRepository(gormDB)
	userService := users.NewUserService(userRepository)
	skillRepository := skills.NewSkillRepository(gormDB)
	skillService := skills.NewSkillService(skillRepository)
	projectRepository := projects.NewProjectRepository(gormDB)
	projectService := projects.NewProjectService(projectRepository, skillService, userService)
	freelancerRepository := freelancers.NewFreelancerRepository(gormDB)
	freelancerService := freelancers.NewFreelancerService(freelancerRepository, skillService, userService)
	likeRepository := likes.NewLikeRepository(gormDB)
	matchRepository := matches.NewMatchRepository(gormDB)
	matchService := matches.NewMatchService(matchRepository)
	likeService := likes.NewLikeService(likeRepository, userService, freelancerService, projectService, matchService)
	app := NewApp(gormDB, userService, skillService, projectService, freelancerService, likeService, matchService)
	return app, nil
}

// wire.go:

type App struct {
	DB                *gorm.DB
	UserService       users.UserService
	SkillService      skills.SkillService
	ProjectService    projects.ProjectService
	FreelancerService freelancers.FreelancerService
	LikeService       likes.LikeService
	MatchService      matches.MatchService
}

func NewApp(db2 *gorm.DB,
	userSvc users.UserService,
	skillSvc skills.SkillService,
	projectSvc projects.ProjectService,
	freelancerSvc freelancers.FreelancerService,
	likeSvc likes.LikeService,
	matchSvc matches.MatchService,
) *App {
	fAdapter := freelancers.NewFreelancerFetcherAdapter(freelancerSvc)
	pAdapter := projects.NewProjectFetcherAdapter(projectSvc)

	freelancerSvc.SetProjectDep(pAdapter)
	projectSvc.SetFreelancerDep(fAdapter)

	return &App{
		DB:                db2,
		UserService:       userSvc,
		SkillService:      skillSvc,
		ProjectService:    projectSvc,
		FreelancerService: freelancerSvc,
		LikeService:       likeSvc,
		MatchService:      matchSvc,
	}
}
