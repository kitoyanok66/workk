// Package oskills provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oskills

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	dto "github.com/kitoyanok66/workk/dto"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// SkillDTO Data Transfer Object representing a skill.
type SkillDTO = dto.SkillDTO

// SkillRequest Request body for creating or updating a skill.
type SkillRequest = dto.SkillRequest

// PostSkillsJSONRequestBody defines body for PostSkills for application/json ContentType.
type PostSkillsJSONRequestBody = SkillRequest

// PatchSkillsIdJSONRequestBody defines body for PatchSkillsId for application/json ContentType.
type PatchSkillsIdJSONRequestBody = SkillRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all skills
	// (GET /skills)
	GetSkills(ctx echo.Context) error
	// Create new skill
	// (POST /skills)
	PostSkills(ctx echo.Context) error
	// Delete skill by ID
	// (DELETE /skills/{id})
	DeleteSkillsId(ctx echo.Context, id openapi_types.UUID) error
	// Get skill by ID
	// (GET /skills/{id})
	GetSkillsId(ctx echo.Context, id openapi_types.UUID) error
	// Update skill
	// (PATCH /skills/{id})
	PatchSkillsId(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSkills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSkills(ctx)
	return err
}

// PostSkills converts echo context to params.
func (w *ServerInterfaceWrapper) PostSkills(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSkills(ctx)
	return err
}

// DeleteSkillsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSkillsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSkillsId(ctx, id)
	return err
}

// GetSkillsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSkillsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSkillsId(ctx, id)
	return err
}

// PatchSkillsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSkillsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSkillsId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/skills", wrapper.GetSkills)
	router.POST(baseURL+"/skills", wrapper.PostSkills)
	router.DELETE(baseURL+"/skills/:id", wrapper.DeleteSkillsId)
	router.GET(baseURL+"/skills/:id", wrapper.GetSkillsId)
	router.PATCH(baseURL+"/skills/:id", wrapper.PatchSkillsId)

}

type GetSkillsRequestObject struct {
}

type GetSkillsResponseObject interface {
	VisitGetSkillsResponse(w http.ResponseWriter) error
}

type GetSkills200JSONResponse []SkillDTO

func (response GetSkills200JSONResponse) VisitGetSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSkills500JSONResponse Error

func (response GetSkills500JSONResponse) VisitGetSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSkillsRequestObject struct {
	Body *PostSkillsJSONRequestBody
}

type PostSkillsResponseObject interface {
	VisitPostSkillsResponse(w http.ResponseWriter) error
}

type PostSkills201JSONResponse SkillDTO

func (response PostSkills201JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSkills400JSONResponse Error

func (response PostSkills400JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSkills404JSONResponse Error

func (response PostSkills404JSONResponse) VisitPostSkillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSkillsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteSkillsIdResponseObject interface {
	VisitDeleteSkillsIdResponse(w http.ResponseWriter) error
}

type DeleteSkillsId204Response struct {
}

func (response DeleteSkillsId204Response) VisitDeleteSkillsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSkillsId400JSONResponse Error

func (response DeleteSkillsId400JSONResponse) VisitDeleteSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSkillsId404JSONResponse Error

func (response DeleteSkillsId404JSONResponse) VisitDeleteSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetSkillsIdResponseObject interface {
	VisitGetSkillsIdResponse(w http.ResponseWriter) error
}

type GetSkillsId200JSONResponse SkillDTO

func (response GetSkillsId200JSONResponse) VisitGetSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsId400JSONResponse Error

func (response GetSkillsId400JSONResponse) VisitGetSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsId404JSONResponse Error

func (response GetSkillsId404JSONResponse) VisitGetSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSkillsId500JSONResponse Error

func (response GetSkillsId500JSONResponse) VisitGetSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchSkillsIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PatchSkillsIdJSONRequestBody
}

type PatchSkillsIdResponseObject interface {
	VisitPatchSkillsIdResponse(w http.ResponseWriter) error
}

type PatchSkillsId200JSONResponse SkillDTO

func (response PatchSkillsId200JSONResponse) VisitPatchSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchSkillsId400JSONResponse Error

func (response PatchSkillsId400JSONResponse) VisitPatchSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchSkillsId404JSONResponse Error

func (response PatchSkillsId404JSONResponse) VisitPatchSkillsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all skills
	// (GET /skills)
	GetSkills(ctx context.Context, request GetSkillsRequestObject) (GetSkillsResponseObject, error)
	// Create new skill
	// (POST /skills)
	PostSkills(ctx context.Context, request PostSkillsRequestObject) (PostSkillsResponseObject, error)
	// Delete skill by ID
	// (DELETE /skills/{id})
	DeleteSkillsId(ctx context.Context, request DeleteSkillsIdRequestObject) (DeleteSkillsIdResponseObject, error)
	// Get skill by ID
	// (GET /skills/{id})
	GetSkillsId(ctx context.Context, request GetSkillsIdRequestObject) (GetSkillsIdResponseObject, error)
	// Update skill
	// (PATCH /skills/{id})
	PatchSkillsId(ctx context.Context, request PatchSkillsIdRequestObject) (PatchSkillsIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSkills operation middleware
func (sh *strictHandler) GetSkills(ctx echo.Context) error {
	var request GetSkillsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkills(ctx.Request().Context(), request.(GetSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkillsResponseObject); ok {
		return validResponse.VisitGetSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostSkills operation middleware
func (sh *strictHandler) PostSkills(ctx echo.Context) error {
	var request PostSkillsRequestObject

	var body PostSkillsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSkills(ctx.Request().Context(), request.(PostSkillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSkills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSkillsResponseObject); ok {
		return validResponse.VisitPostSkillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSkillsId operation middleware
func (sh *strictHandler) DeleteSkillsId(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteSkillsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSkillsId(ctx.Request().Context(), request.(DeleteSkillsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSkillsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSkillsIdResponseObject); ok {
		return validResponse.VisitDeleteSkillsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSkillsId operation middleware
func (sh *strictHandler) GetSkillsId(ctx echo.Context, id openapi_types.UUID) error {
	var request GetSkillsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSkillsId(ctx.Request().Context(), request.(GetSkillsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSkillsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSkillsIdResponseObject); ok {
		return validResponse.VisitGetSkillsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchSkillsId operation middleware
func (sh *strictHandler) PatchSkillsId(ctx echo.Context, id openapi_types.UUID) error {
	var request PatchSkillsIdRequestObject

	request.Id = id

	var body PatchSkillsIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchSkillsId(ctx.Request().Context(), request.(PatchSkillsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchSkillsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchSkillsIdResponseObject); ok {
		return validResponse.VisitPatchSkillsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
